 1. Extract AWS environment variables from the container
Run this command from your host terminal (not inside SSH):

bash
Copy
Edit
docker exec devcontainer bash -c "export -p | grep -E 'AWS_' | sed 's/declare -x/export/' > /etc/profile.d/docker_env.sh"
This creates a secure shell script (/etc/profile.d/docker_env.sh) that defines all AWS_ environment variables available inside the container.

ðŸ”¹ 2. Verify the file was created
Still from the host or using docker exec:

bash
Copy
Edit
docker exec devcontainer cat /etc/profile.d/docker_env.sh
You should see something like:

bash
Copy
Edit
export AWS_ACCESS_KEY_ID=your-access-key
export AWS_SECRET_ACCESS_KEY=your-secret-key
ðŸ”¹ 3. Now connect via SSH
bash
Copy
Edit
ssh root@localhost -p 22023
Once connected, verify that the environment variables are now available:

bash
Copy
Edit
echo $AWS_ACCESS_KEY_ID
echo $AWS_SECRET_ACCESS_KEY
They should no longer be None.

ðŸ§  Why this works
Docker Compose injects environment variables at container startup, but SSH sessions start fresh and donâ€™t inherit them. This method manually exports them into a login script that gets loaded for every SSH shell.

and add 
# Explicitly source environment variables when VS Code connects
if [ -f /etc/profile.d/docker_env.sh ]; then
  source /etc/profile.d/docker_env.sh
fi

to bashrc (nano /root/.bashrc)